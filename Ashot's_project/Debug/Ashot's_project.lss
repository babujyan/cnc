
Ashot's_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  00000476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098d  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072d  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000581  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023b  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 31       	cpi	r26, 0x17	; 23
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cb 01 	call	0x396	; 0x396 <main>
  88:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Init_Timers>:

void 	Init_Timers()
{
	// enable timer interrupt for Timer0
		
	TCCR0A = (1<<WGM21); //ctc
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   //use clk/8
  94:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A); //interrupt
  96:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0=0x00;
  9a:	16 bc       	out	0x26, r1	; 38
	OCR0A=199;   // 10kHz
  9c:	97 ec       	ldi	r25, 0xC7	; 199
  9e:	97 bd       	out	0x27, r25	; 39
	//OCR1A=199;	// 10kHz


	// enable timer interrupt for Timer2

	TCCR2A = (1<<WGM21); //ctc
  a0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<CS21);   //use clk/8
  a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = (1<<OCIE2A); //interrupt
  a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCNT2=0x00;
  ac:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=199;   // 10kHz
  b0:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  b4:	08 95       	ret

000000b6 <Init_Interrupts>:

void Init_Interrupts()
{
	// enable External Interrupt Request 0 (pin 2)

	EICRA =0x03; //(1<<ISC00) | (1<<ISC01);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	//EIFR = (1<<INTF0);
//
	//// enable External Interrupt Request 1 (pin 3)

	//EICRA =0x00;//(1<<ISC10) | (1<<ISC11);
	EIMSK = 0x03;//(1<<INT1);
  bc:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0x03;//(1<<INTF1);
  be:	8c bb       	out	0x1c, r24	; 28
  c0:	08 95       	ret

000000c2 <__vector_1>:
//
	//PORTB&=(0<< PB0);
//}

ISR (INT0_vect)
{	
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	if(a==ON)
  d0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <a>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	81 f4       	brne	.+32     	; 0xf8 <__vector_1+0x36>
	{
		battom1=ON;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <battom1+0x1>
  e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <battom1>
		j1=0;
  e4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <j1+0x1>
  e8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <j1>
		c=40960;//2560;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 ea       	ldi	r25, 0xA0	; 160
  f0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <c+0x1>
  f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <c>
	}
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_7>:

ISR (TIMER2_COMPA_vect) 
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	
	if(battom1==ON)
 116:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <battom1>
 11a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <battom1+0x1>
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	09 f0       	breq	.+2      	; 0x124 <__vector_7+0x1e>
 122:	6d c0       	rjmp	.+218    	; 0x1fe <__vector_7+0xf8>
	{
		a=OFF;
 124:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <a>

		//PORTB|=(1<< PB0);
		motor_1_ON;
 128:	28 9a       	sbi	0x05, 0	; 5

		if (b!=0)
 12a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <b>
 12e:	88 23       	and	r24, r24
 130:	09 f4       	brne	.+2      	; 0x134 <__vector_7+0x2e>
 132:	52 c0       	rjmp	.+164    	; 0x1d8 <__vector_7+0xd2>
		{
			if(j1==0)
 134:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <j1>
 138:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <j1+0x1>
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	31 f5       	brne	.+76     	; 0x18c <__vector_7+0x86>
			{
				motor_1_Inverse;
 140:	95 b1       	in	r25, 0x05	; 5
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	89 27       	eor	r24, r25
 146:	85 b9       	out	0x05, r24	; 5
				i1++;
 148:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i1>
 14c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <i1+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <i1+0x1>
 156:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <i1>
			//	j1=4;

				/*******************************/
				/*==== >> avelacrac mas << ====*/

				if(c!=5)
 15a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <c>
 15e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <c+0x1>
 162:	85 30       	cpi	r24, 0x05	; 5
 164:	91 05       	cpc	r25, r1
 166:	59 f0       	breq	.+22     	; 0x17e <__vector_7+0x78>
				{
				c=c/2;
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <c+0x1>
 170:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <c>
				j1=c; 
 174:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <j1+0x1>
 178:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <j1>
 17c:	0c c0       	rjmp	.+24     	; 0x196 <__vector_7+0x90>
				}
				else
				j1=4;//1khz generation 6sc 10-200ms wait 
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <j1+0x1>
 186:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <j1>
 18a:	05 c0       	rjmp	.+10     	; 0x196 <__vector_7+0x90>

			}

			else
			{
				j1--;
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <j1+0x1>
 192:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <j1>
			}

			if(i1==12000)
 196:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i1>
 19a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <i1+0x1>
 19e:	80 3e       	cpi	r24, 0xE0	; 224
 1a0:	9e 42       	sbci	r25, 0x2E	; 46
 1a2:	69 f5       	brne	.+90     	; 0x1fe <__vector_7+0xf8>
			{
				i1=0;
 1a4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <i1+0x1>
 1a8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <i1>
				b--;
 1ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <b>
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <b>
				
				//PORTB &= 0xFC; //&=(0<< PB1);
				motor_1_signal_OFF;
 1b6:	29 98       	cbi	0x05, 1	; 5
				//PORTB &=(0<< PB0);
				motor_1_OFF;
 1b8:	28 98       	cbi	0x05, 0	; 5
				//PORTB ^=0x04;//(1<< PB2);
				motor_1_dir_inverse;
 1ba:	95 b1       	in	r25, 0x05	; 5
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	89 27       	eor	r24, r25
 1c0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	91 ee       	ldi	r25, 0xE1	; 225
 1c6:	24 e0       	ldi	r18, 0x04	; 4
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <__vector_7+0xc2>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <__vector_7+0xcc>
 1d2:	00 00       	nop
				_delay_ms(100);



				//PORTB|=0x01;//(1<< PB0);
				motor_1_ON;
 1d4:	28 9a       	sbi	0x05, 0	; 5
 1d6:	13 c0       	rjmp	.+38     	; 0x1fe <__vector_7+0xf8>
			}
		}

		else
		{
			PORTB|=0x04;//(1<< PB2);
 1d8:	2a 9a       	sbi	0x05, 2	; 5
			//PORTB&=0xFE;//(0<< PB0);
			motor_1_OFF;
 1da:	28 98       	cbi	0x05, 0	; 5
			battom1=OFF;
 1dc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <battom1+0x1>
 1e0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <battom1>
			battom0=ON;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			j0=0;
 1f0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <j0+0x1>
 1f4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <j0>
			//b=Nuber_of_operetions;
			b=4;
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <b>
		}
	}

}	
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_14>:



ISR (TIMER0_COMPA_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
	if(battom0==ON)
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 220:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f5       	brne	.+124    	; 0x2a4 <__vector_14+0x96>
	{
		//PORTD|=(1<< PD7);
		motor_2_ON;
 228:	5f 9a       	sbi	0x0b, 7	; 11
		if(j0==0)
 22a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <j0>
 22e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <j0+0x1>
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	a1 f4       	brne	.+40     	; 0x25e <__vector_14+0x50>
		{
			//PORTD^=(1<< PD6 );
			motor_2_Inverse;
 236:	9b b1       	in	r25, 0x0b	; 11
 238:	80 e4       	ldi	r24, 0x40	; 64
 23a:	89 27       	eor	r24, r25
 23c:	8b b9       	out	0x0b, r24	; 11
			i0++;
 23e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <i0>
 242:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <i0+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <i0+0x1>
 24c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <i0>
			j0=50;
 250:	82 e3       	ldi	r24, 0x32	; 50
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <j0+0x1>
 258:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <j0>
 25c:	05 c0       	rjmp	.+10     	; 0x268 <__vector_14+0x5a>
		}

		else
		{
			j0--;
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <j0+0x1>
 264:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <j0>
		}
		if(i0==200)
 268:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <i0>
 26c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <i0+0x1>
 270:	88 3c       	cpi	r24, 0xC8	; 200
 272:	91 05       	cpc	r25, r1
 274:	b9 f4       	brne	.+46     	; 0x2a4 <__vector_14+0x96>
		{
			i0=0;
 276:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <i0+0x1>
 27a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <i0>
			battom0=OFF;
 27e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 282:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			
			//PORTD&=(0<< PD7);
			motor_2_OFF;
 286:	5f 98       	cbi	0x0b, 7	; 11
			//PORTD^=(0<< PD6);
			//motor_2_Inverse;
			motor_2_signal_OFF;
 288:	5e 98       	cbi	0x0b, 6	; 11
			a=ON;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <a>
			battom1=ON;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <battom1+0x1>
 298:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <battom1>
			j1=0;
 29c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <j1+0x1>
 2a0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <j1>
		}
	
	}


}
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <__vector_2>:
/***************************************
===========>> manual mode <<===========*/
/*======= >> avelacrac mas << ==========*/

ISR(INT1_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	//u= 0x00;
	a=OFF;
 2c8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <a>
	battom1=OFF;
 2cc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <battom1+0x1>
 2d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <battom1>
	battom0=OFF;
 2d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	//PORTD&=0x7F;
	motor_2_signal_OFF;
 2dc:	5e 98       	cbi	0x0b, 6	; 11
	motor_2_OFF;
 2de:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB&=0xFE;
	motor_1_OFF;
 2e0:	28 98       	cbi	0x05, 0	; 5

	PORTB^=0x20;
 2e2:	95 b1       	in	r25, 0x05	; 5
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	89 27       	eor	r24, r25
 2e8:	85 b9       	out	0x05, r24	; 5

	manual_mode=0x08 & PORTD;
 2ea:	8b b1       	in	r24, 0x0b	; 11
 2ec:	88 70       	andi	r24, 0x08	; 8
 2ee:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <manual_mode>
	while(manual_mode==OFF)//)PD3
 2f2:	81 11       	cpse	r24, r1
 2f4:	42 c0       	rjmp	.+132    	; 0x37a <__vector_2+0xc8>
		while(w!=0)//PIND4==0x10
		{ 
			//PORTB|=0x01;
			motor_1_ON;
			//PORTB^=0x02;//(1<< PB1 );
			motor_1_Inverse;
 2f6:	32 e0       	ldi	r19, 0x02	; 2
			for(u=1;u<=200;u++)
			{
				//PORTD|=0x80;//(1<< PD7);
				//PORTD^=0x40;//(1<< PD6 );
				motor_2_ON;
				motor_2_Inverse;
 2f8:	90 e4       	ldi	r25, 0x40	; 64
		motor_1_signal_OFF;

		r=0x20 & PIND;
		while(r!=0)
		{
			for(u=1;u<=200;u++)
 2fa:	21 e0       	ldi	r18, 0x01	; 1

	manual_mode=0x08 & PORTD;
	while(manual_mode==OFF)//)PD3
	{

		w= 0x10 & PIND;
 2fc:	89 b1       	in	r24, 0x09	; 9
 2fe:	80 71       	andi	r24, 0x10	; 16
 300:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <w>
		while(w!=0)//PIND4==0x10
 304:	88 23       	and	r24, r24
 306:	81 f0       	breq	.+32     	; 0x328 <__vector_2+0x76>
		{ 
			//PORTB|=0x01;
			motor_1_ON;
 308:	28 9a       	sbi	0x05, 0	; 5
			//PORTB^=0x02;//(1<< PB1 );
			motor_1_Inverse;
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	83 27       	eor	r24, r19
 30e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	ef ec       	ldi	r30, 0xCF	; 207
 312:	f7 e0       	ldi	r31, 0x07	; 7
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <__vector_2+0x62>
 318:	00 c0       	rjmp	.+0      	; 0x31a <__vector_2+0x68>
 31a:	00 00       	nop
			_delay_us(500);
			w= 0x10 & PIND;				
 31c:	89 b1       	in	r24, 0x09	; 9
 31e:	80 71       	andi	r24, 0x10	; 16
 320:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <w>
	manual_mode=0x08 & PORTD;
	while(manual_mode==OFF)//)PD3
	{

		w= 0x10 & PIND;
		while(w!=0)//PIND4==0x10
 324:	81 11       	cpse	r24, r1
 326:	f0 cf       	rjmp	.-32     	; 0x308 <__vector_2+0x56>
			_delay_us(500);
			w= 0x10 & PIND;				
		}
			
		//PORTB&=0xFE;//(0<< PB0);
		motor_1_OFF;
 328:	28 98       	cbi	0x05, 0	; 5
		motor_1_signal_OFF;
 32a:	29 98       	cbi	0x05, 1	; 5

		r=0x20 & PIND;
 32c:	89 b1       	in	r24, 0x09	; 9
 32e:	80 72       	andi	r24, 0x20	; 32
 330:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <r>
		while(r!=0)
 334:	88 23       	and	r24, r24
 336:	c9 f0       	breq	.+50     	; 0x36a <__vector_2+0xb8>
		{
			for(u=1;u<=200;u++)
 338:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <u>
			{
				//PORTD|=0x80;//(1<< PD7);
				//PORTD^=0x40;//(1<< PD6 );
				motor_2_ON;
 33c:	5f 9a       	sbi	0x0b, 7	; 11
				motor_2_Inverse;
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	89 27       	eor	r24, r25
 342:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	ef e1       	ldi	r30, 0x1F	; 31
 346:	fe e4       	ldi	r31, 0x4E	; 78
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <__vector_2+0x96>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <__vector_2+0x9c>
 34e:	00 00       	nop
		motor_1_signal_OFF;

		r=0x20 & PIND;
		while(r!=0)
		{
			for(u=1;u<=200;u++)
 350:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <u>
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <u>
 35a:	89 3c       	cpi	r24, 0xC9	; 201
 35c:	78 f3       	brcs	.-34     	; 0x33c <__vector_2+0x8a>
				motor_2_ON;
				motor_2_Inverse;
				_delay_ms(5);
			}

			r=0x20 & PIND;
 35e:	89 b1       	in	r24, 0x09	; 9
 360:	80 72       	andi	r24, 0x20	; 32
 362:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <r>
		//PORTB&=0xFE;//(0<< PB0);
		motor_1_OFF;
		motor_1_signal_OFF;

		r=0x20 & PIND;
		while(r!=0)
 366:	81 11       	cpse	r24, r1
 368:	e7 cf       	rjmp	.-50     	; 0x338 <__vector_2+0x86>
			}

			r=0x20 & PIND;
		}
		//PORTD&=0x7F;
		motor_2_OFF;
 36a:	5f 98       	cbi	0x0b, 7	; 11
		motor_2_signal_OFF;
 36c:	5e 98       	cbi	0x0b, 6	; 11

		manual_mode_check;
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	88 70       	andi	r24, 0x08	; 8
 372:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <manual_mode>
	motor_1_OFF;

	PORTB^=0x20;

	manual_mode=0x08 & PORTD;
	while(manual_mode==OFF)//)PD3
 376:	88 23       	and	r24, r24
 378:	09 f2       	breq	.-126    	; 0x2fc <__vector_2+0x4a>
		motor_2_OFF;
		motor_2_signal_OFF;

		manual_mode_check;
	}
	a=ON;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <a>


}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <main>:


int main(void)
{
	//way=0x00;
	battom0=OFF;
 396:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 39a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	i0=0;
 39e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <i0+0x1>
 3a2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <i0>
	j0=0;
 3a6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <j0+0x1>
 3aa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <j0>
	battom1=OFF;
 3ae:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <battom1+0x1>
 3b2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <battom1>
	i1=0;
 3b6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <i1+0x1>
 3ba:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <i1>
	j1=0;
 3be:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <j1+0x1>
 3c2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <j1>

	b=4;
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <b>

	a=ON;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <a>



	DDRB=(1<<DDB1)|(1<<DDB0)|(1<<DDB2)|(1<<DDB5);
 3d2:	87 e2       	ldi	r24, 0x27	; 39
 3d4:	84 b9       	out	0x04, r24	; 4
	//PORTB=(1<< PB2)|(1<<PB5);
	motor_1_dir_on;
 3d6:	2a 9a       	sbi	0x05, 2	; 5
	PORTD=0x00;
 3d8:	1b b8       	out	0x0b, r1	; 11
	DDRD=(1<<DDD7)|(1<<DDD6);
 3da:	80 ec       	ldi	r24, 0xC0	; 192
 3dc:	8a b9       	out	0x0a, r24	; 10
	//PORTD=(1<<PORTD3);
	

	cli();
 3de:	f8 94       	cli
	Init_Interrupts();
 3e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <Init_Interrupts>
	Init_Timers();
 3e4:	0e 94 48 00 	call	0x90	; 0x90 <Init_Timers>
	//Init_ADC();
	//ADC_read();
	sei();
 3e8:	78 94       	sei
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	83 ed       	ldi	r24, 0xD3	; 211
 3ee:	90 e3       	ldi	r25, 0x30	; 48
 3f0:	21 50       	subi	r18, 0x01	; 1
 3f2:	80 40       	sbci	r24, 0x00	; 0
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x5a>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x64>
 3fa:	00 00       	nop
 3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <main+0x54>

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
