
Ashot's_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000636  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f1  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072b  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068c  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000274  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 31       	cpi	r26, 0x1D	; 29
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a1 02 	call	0x542	; 0x542 <main>
  88:	0c 94 df 02 	jmp	0x5be	; 0x5be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Init_Timers>:

void 	Init_Timers()
{
	// enable timer interrupt for Timer0
		
	TCCR0A = (1<<WGM21); //ctc
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   //use clk/8
  94:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A); //interrupt
  96:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0=0x00;
  9a:	16 bc       	out	0x26, r1	; 38
	OCR0A=199;   // 10kHz
  9c:	97 ec       	ldi	r25, 0xC7	; 199
  9e:	97 bd       	out	0x27, r25	; 39
	//OCR1A=199;	// 10kHz


	// enable timer interrupt for Timer2

	TCCR2A = (1<<WGM21); //ctc
  a0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<CS21);   //use clk/8
  a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = (1<<OCIE2A); //interrupt
  a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCNT2=0x00;
  ac:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=199;   // 10kHz
  b0:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  b4:	08 95       	ret

000000b6 <Init_Interrupts>:

void Init_Interrupts()
{
	// enable External Interrupt Request 0 (pin 2)

	EICRA =0x03; //(1<<ISC00) | (1<<ISC01);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	//EIFR = (1<<INTF0);
//
	//// enable External Interrupt Request 1 (pin 3)

	//EICRA =0x00;//(1<<ISC10) | (1<<ISC11);
	EIMSK = 0x03;//(1<<INT1);
  bc:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0x03;//(1<<INTF1);
  be:	8c bb       	out	0x1c, r24	; 28
  c0:	08 95       	ret

000000c2 <__vector_1>:
//
	//PORTB&=(0<< PB0);
//}

ISR (INT0_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	block = 0x02 & PORTD;
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	82 70       	andi	r24, 0x02	; 2
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
	if(block==OFF)
  de:	89 2b       	or	r24, r25
  e0:	e1 f4       	brne	.+56     	; 0x11a <__vector_1+0x58>
	{
		if(a==ON)
  e2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <a>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	81 f4       	brne	.+32     	; 0x10a <__vector_1+0x48>
		{
			battom1=ON;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <battom1+0x1>
  f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <battom1>
			j1=0;
  f6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <j1+0x1>
  fa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <j1>
			c=40960;//2560;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 ea       	ldi	r25, 0xA0	; 160
 102:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <c+0x1>
 106:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <c>
		}
	block = 0x02 & PORTD;
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	82 70       	andi	r24, 0x02	; 2
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 114:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
 118:	0a c0       	rjmp	.+20     	; 0x12e <__vector_1+0x6c>
	}
	else 
	{
		a=OFF;
 11a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <a>
		battom1=OFF;
 11e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <battom1+0x1>
 122:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <battom1>
		battom0=OFF;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	}
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_7>:

ISR (TIMER2_COMPA_vect) 
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
	block = 0x02 & PORTD;
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	82 70       	andi	r24, 0x02	; 2
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
	if(block==OFF)
 15a:	89 2b       	or	r24, r25
 15c:	09 f0       	breq	.+2      	; 0x160 <__vector_7+0x24>
 15e:	8d c0       	rjmp	.+282    	; 0x27a <__vector_7+0x13e>
	{
		if(battom1==ON)
 160:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <battom1>
 164:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <battom1+0x1>
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <__vector_7+0x32>
 16c:	7e c0       	rjmp	.+252    	; 0x26a <__vector_7+0x12e>
		{
			a=OFF;
 16e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <a>

			PORTB|=(1<< PB0);
 172:	28 9a       	sbi	0x05, 0	; 5
		

			if (b!=0)
 174:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <b>
 178:	88 23       	and	r24, r24
 17a:	09 f4       	brne	.+2      	; 0x17e <__vector_7+0x42>
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__vector_7+0x108>
			{
				if(j1==0)
 17e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <j1>
 182:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <j1+0x1>
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	31 f5       	brne	.+76     	; 0x1d6 <__vector_7+0x9a>
				{
					PORTB^=(1<< PB1 );
 18a:	95 b1       	in	r25, 0x05	; 5
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	89 27       	eor	r24, r25
 190:	85 b9       	out	0x05, r24	; 5
					i1++;
 192:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <i1>
 196:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <i1+0x1>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <i1+0x1>
 1a0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <i1>
				//	j1=4;

					/*******************************/
					/*==== >> avelacrac mas << ====*/

					if(c>=8)
 1a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <c>
 1a8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <c+0x1>
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	91 05       	cpc	r25, r1
 1b0:	58 f0       	brcs	.+22     	; 0x1c8 <__vector_7+0x8c>
					{
						c=c/2;
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <c+0x1>
 1ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <c>
						j1=c; 
 1be:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <j1+0x1>
 1c2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <j1>
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <__vector_7+0xa4>
					}
					else
						j1=4;//1khz generation 6sc 10-200ms wait 
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <j1+0x1>
 1d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <j1>
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <__vector_7+0xa4>

				}

				else
				{
					j1--;
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <j1+0x1>
 1dc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <j1>
				}

				block = 0x02 & PORTD;
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	82 70       	andi	r24, 0x02	; 2
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 1ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
				if(block==OFF)
 1ee:	89 2b       	or	r24, r25
 1f0:	e1 f5       	brne	.+120    	; 0x26a <__vector_7+0x12e>
				{
					if(i1==12000)
 1f2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <i1>
 1f6:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <i1+0x1>
 1fa:	80 3e       	cpi	r24, 0xE0	; 224
 1fc:	9e 42       	sbci	r25, 0x2E	; 46
 1fe:	d1 f4       	brne	.+52     	; 0x234 <__vector_7+0xf8>
					{
						i1=0;
 200:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <i1+0x1>
 204:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <i1>
						b--;
 208:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <b>
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <b>
				
						PORTB &= 0xFC; //&=(0<< PB1);
 212:	85 b1       	in	r24, 0x05	; 5
 214:	8c 7f       	andi	r24, 0xFC	; 252
 216:	85 b9       	out	0x05, r24	; 5
					//	PORTB &=(0<< PB0);
						PORTB ^=0x04;//(1<< PB2);
 218:	95 b1       	in	r25, 0x05	; 5
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	89 27       	eor	r24, r25
 21e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	91 ee       	ldi	r25, 0xE1	; 225
 224:	24 e0       	ldi	r18, 0x04	; 4
 226:	81 50       	subi	r24, 0x01	; 1
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <__vector_7+0xea>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <__vector_7+0xf4>
 230:	00 00       	nop
						_delay_ms(100);
						PORTB|=0x01;//(1<< PB0);
 232:	28 9a       	sbi	0x05, 0	; 5
				
					}

				block = 0x02 & PORTD;
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	82 70       	andi	r24, 0x02	; 2
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
 242:	13 c0       	rjmp	.+38     	; 0x26a <__vector_7+0x12e>
				}
			}

			else
			{
				PORTB|=0x04;//(1<< PB2);
 244:	2a 9a       	sbi	0x05, 2	; 5
				PORTB&=0xFE;//(0<< PB0);
 246:	28 98       	cbi	0x05, 0	; 5
				battom1=OFF;
 248:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <battom1+0x1>
 24c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <battom1>
				battom0=ON;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 258:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				j0=0;
 25c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <j0+0x1>
 260:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <j0>
				//b=Nuber_of_operetions;
				b=2;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <b>
			}
		}

	block = 0x02 & PORTD;
 26a:	8b b1       	in	r24, 0x0b	; 11
 26c:	82 70       	andi	r24, 0x02	; 2
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 274:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
 278:	0a c0       	rjmp	.+20     	; 0x28e <__vector_7+0x152>

	}

	else
	{
		a=OFF;
 27a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <a>
		battom1=OFF;
 27e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <battom1+0x1>
 282:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <battom1>
		battom0=OFF;
 286:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 28a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	}

}	
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_14>:



ISR (TIMER0_COMPA_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
	block = 0x02 & PORTD;
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	82 70       	andi	r24, 0x02	; 2
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 2b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
	if(block==OFF)
 2ba:	89 2b       	or	r24, r25
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <__vector_14+0x22>
 2be:	4f c0       	rjmp	.+158    	; 0x35e <__vector_14+0xc0>
	{
		if(battom0==ON)
 2c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	09 f0       	breq	.+2      	; 0x2ce <__vector_14+0x30>
 2cc:	40 c0       	rjmp	.+128    	; 0x34e <__vector_14+0xb0>
		{
			PORTD|=(1<< PD7);
 2ce:	5f 9a       	sbi	0x0b, 7	; 11

			if(j0==0)
 2d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <j0>
 2d4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <j0+0x1>
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	a1 f4       	brne	.+40     	; 0x304 <__vector_14+0x66>
			{
				PORTD^=(1<< PD6 );
 2dc:	9b b1       	in	r25, 0x0b	; 11
 2de:	80 e4       	ldi	r24, 0x40	; 64
 2e0:	89 27       	eor	r24, r25
 2e2:	8b b9       	out	0x0b, r24	; 11
				i0++;
 2e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i0>
 2e8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i0+0x1>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i0+0x1>
 2f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i0>
				j0=50;
 2f6:	82 e3       	ldi	r24, 0x32	; 50
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <j0+0x1>
 2fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <j0>
 302:	05 c0       	rjmp	.+10     	; 0x30e <__vector_14+0x70>
			}

			else
			{
				j0--;
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <j0+0x1>
 30a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <j0>
			}
			if(i0==200)
 30e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i0>
 312:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i0+0x1>
 316:	88 3c       	cpi	r24, 0xC8	; 200
 318:	91 05       	cpc	r25, r1
 31a:	c9 f4       	brne	.+50     	; 0x34e <__vector_14+0xb0>
			{
				i0=0;
 31c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i0+0x1>
 320:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i0>
				battom0=OFF;
 324:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 328:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				PORTD&=(0<< PD7);
 32c:	8b b1       	in	r24, 0x0b	; 11
 32e:	1b b8       	out	0x0b, r1	; 11
				PORTD^=(0<< PD6);
 330:	8b b1       	in	r24, 0x0b	; 11
 332:	8b b9       	out	0x0b, r24	; 11
				a=ON;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <a>
				battom1=ON;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <battom1+0x1>
 342:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <battom1>
				j1=0;
 346:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <j1+0x1>
 34a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <j1>
			}

		}

	block = 0x02 & PORTD;
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	82 70       	andi	r24, 0x02	; 2
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 358:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
 35c:	0a c0       	rjmp	.+20     	; 0x372 <__vector_14+0xd4>
	}
	else
	{
		a=OFF;
 35e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <a>
		battom1=OFF;
 362:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <battom1+0x1>
 366:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <battom1>
		battom0=OFF;
 36a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 36e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	}

}
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_2>:
/***************************************
===========>> manual mode <<===========*/
/*======= >> avelacrac mas << ==========*/

ISR(INT1_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	2f 93       	push	r18
 38c:	3f 93       	push	r19
 38e:	4f 93       	push	r20
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
	
	
	u= 0x00;
 394:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <u>
	a=OFF;
 398:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <a>
	battom1=OFF;
 39c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <battom1+0x1>
 3a0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <battom1>
	battom0=OFF;
 3a4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 3a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PORTD&=0x7F;
 3ac:	5f 98       	cbi	0x0b, 7	; 11
	PORTB&=0xFE;
 3ae:	28 98       	cbi	0x05, 0	; 5
	PORTB^=0x20;
 3b0:	95 b1       	in	r25, 0x05	; 5
 3b2:	80 e2       	ldi	r24, 0x20	; 32
 3b4:	89 27       	eor	r24, r25
 3b6:	85 b9       	out	0x05, r24	; 5

	block = 0x02 & PORTD;
 3b8:	8b b1       	in	r24, 0x0b	; 11
 3ba:	82 70       	andi	r24, 0x02	; 2
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 3c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
	if(block==OFF)
 3c6:	89 2b       	or	r24, r25
 3c8:	09 f0       	breq	.+2      	; 0x3cc <__vector_2+0x4c>
 3ca:	ae c0       	rjmp	.+348    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	{
		e=0x08 & PORTD;
 3cc:	8b b1       	in	r24, 0x0b	; 11
 3ce:	88 70       	andi	r24, 0x08	; 8
 3d0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <e>
		while(e==0)//)PD3
 3d4:	81 11       	cpse	r24, r1
 3d6:	a8 c0       	rjmp	.+336    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
				w= 0x10 & PIND;
				while(w!=0)//PIND4==0x10
				{ 
					PORTB|=0x01;

					PORTB^=0x02;//(1<< PB1 );
 3d8:	32 e0       	ldi	r19, 0x02	; 2
			while(r!=0)
			{
				for(u=1;u<=200;u++)
				{
					PORTD|=0x80;//(1<< PD7);
					PORTD^=0x40;//(1<< PD6 );
 3da:	20 e4       	ldi	r18, 0x40	; 64
			
			PORTB&=0xFE;//(0<< PB0);
			r=0x20 & PIND;
			while(r!=0)
			{
				for(u=1;u<=200;u++)
 3dc:	41 e0       	ldi	r20, 0x01	; 1
		e=0x08 & PORTD;
		while(e==0)//)PD3
		{
			//PORTB^=0x20;//(1<<PB5);
			//_delay_ms(200);
			block = 0x02 & PORTD;
 3de:	8b b1       	in	r24, 0x0b	; 11
 3e0:	82 70       	andi	r24, 0x02	; 2
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 3e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
			if(block==OFF)
 3ec:	89 2b       	or	r24, r25
 3ee:	01 f5       	brne	.+64     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			{
				w= 0x10 & PIND;
 3f0:	89 b1       	in	r24, 0x09	; 9
 3f2:	80 71       	andi	r24, 0x10	; 16
 3f4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <w>
				while(w!=0)//PIND4==0x10
 3f8:	17 c0       	rjmp	.+46     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				{ 
					PORTB|=0x01;
 3fa:	28 9a       	sbi	0x05, 0	; 5

					PORTB^=0x02;//(1<< PB1 );
 3fc:	85 b1       	in	r24, 0x05	; 5
 3fe:	83 27       	eor	r24, r19
 400:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 402:	8f ec       	ldi	r24, 0xCF	; 207
 404:	97 e0       	ldi	r25, 0x07	; 7
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
					_delay_us(500);
					w= 0x10 & PIND;
 40e:	89 b1       	in	r24, 0x09	; 9
 410:	80 71       	andi	r24, 0x10	; 16
 412:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <w>
					block = 0x02 & PORTD;
 416:	8b b1       	in	r24, 0x0b	; 11
 418:	82 70       	andi	r24, 0x02	; 2
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 420:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
					if(block==OFF)
 424:	89 2b       	or	r24, r25
 426:	21 f0       	breq	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			//_delay_ms(200);
			block = 0x02 & PORTD;
			if(block==OFF)
			{
				w= 0x10 & PIND;
				while(w!=0)//PIND4==0x10
 428:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <w>
 42c:	81 11       	cpse	r24, r1
 42e:	e5 cf       	rjmp	.-54     	; 0x3fa <__vector_2+0x7a>
					}
							
				}
			}
			
			PORTB&=0xFE;//(0<< PB0);
 430:	28 98       	cbi	0x05, 0	; 5
			r=0x20 & PIND;
 432:	89 b1       	in	r24, 0x09	; 9
 434:	80 72       	andi	r24, 0x20	; 32
 436:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <r>
			while(r!=0)
 43a:	20 c0       	rjmp	.+64     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			{
				for(u=1;u<=200;u++)
 43c:	40 93 1c 01 	sts	0x011C, r20	; 0x80011c <u>
				{
					PORTD|=0x80;//(1<< PD7);
 440:	5f 9a       	sbi	0x0b, 7	; 11
					PORTD^=0x40;//(1<< PD6 );
 442:	8b b1       	in	r24, 0x0b	; 11
 444:	82 27       	eor	r24, r18
 446:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
					_delay_ms(5);
					r=0x20 & PIND;
 454:	89 b1       	in	r24, 0x09	; 9
 456:	80 72       	andi	r24, 0x20	; 32
 458:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <r>
					block = 0x02 & PORTD;
 45c:	8b b1       	in	r24, 0x0b	; 11
 45e:	82 70       	andi	r24, 0x02	; 2
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 466:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
					if(block==OFF)
 46a:	89 2b       	or	r24, r25
 46c:	39 f0       	breq	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			
			PORTB&=0xFE;//(0<< PB0);
			r=0x20 & PIND;
			while(r!=0)
			{
				for(u=1;u<=200;u++)
 46e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u>
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <u>
 478:	89 3c       	cpi	r24, 0xC9	; 201
 47a:	10 f3       	brcs	.-60     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				}
			}
			
			PORTB&=0xFE;//(0<< PB0);
			r=0x20 & PIND;
			while(r!=0)
 47c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <r>
 480:	81 11       	cpse	r24, r1
 482:	dc cf       	rjmp	.-72     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
						break;
					}
				}

			}
			PORTD&=0x7F;
 484:	5f 98       	cbi	0x0b, 7	; 11

		
	
		/////////////////////////////

			h = 0x10 & PINB;
 486:	83 b1       	in	r24, 0x03	; 3
 488:	80 71       	andi	r24, 0x10	; 16
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <h+0x1>
 490:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <h>
			while(h==1)
 494:	3b c0       	rjmp	.+118    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			{
				led = 0x08 & PINB; // pinb3 pin 11
 496:	83 b1       	in	r24, 0x03	; 3
 498:	88 70       	andi	r24, 0x08	; 8
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 4a0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>

				while(led==1)
 4a4:	1a c0       	rjmp	.+52     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				{
					PORTB|=0x01;
 4a6:	28 9a       	sbi	0x05, 0	; 5

					PORTB^=0x02;//(1<< PB1 );
 4a8:	85 b1       	in	r24, 0x05	; 5
 4aa:	83 27       	eor	r24, r19
 4ac:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ae:	8f ec       	ldi	r24, 0xCF	; 207
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
					_delay_us(500);

					led = 0x08 & PINB;
 4ba:	83 b1       	in	r24, 0x03	; 3
 4bc:	88 70       	andi	r24, 0x08	; 8
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 4c4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
					block = 0x02 & PORTD;
 4c8:	8b b1       	in	r24, 0x0b	; 11
 4ca:	82 70       	andi	r24, 0x02	; 2
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 4d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
					if(block==OFF)
 4d6:	89 2b       	or	r24, r25
 4d8:	31 f0       	breq	.+12     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			h = 0x10 & PINB;
			while(h==1)
			{
				led = 0x08 & PINB; // pinb3 pin 11

				while(led==1)
 4da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <led>
 4de:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <led+0x1>
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	01 f3       	breq	.-64     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
						break;
					}

			
				}
				PORTB&=0xFC;
 4e6:	85 b1       	in	r24, 0x05	; 5
 4e8:	8c 7f       	andi	r24, 0xFC	; 252
 4ea:	85 b9       	out	0x05, r24	; 5

				h = 0x10 & PINB;
 4ec:	83 b1       	in	r24, 0x03	; 3
 4ee:	80 71       	andi	r24, 0x10	; 16
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <h+0x1>
 4f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <h>
				block = 0x02 & PORTD;
 4fa:	8b b1       	in	r24, 0x0b	; 11
 4fc:	82 70       	andi	r24, 0x02	; 2
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 504:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
				if(block==OFF)
 508:	89 2b       	or	r24, r25
 50a:	39 f0       	breq	.+14     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		
	
		/////////////////////////////

			h = 0x10 & PINB;
			while(h==1)
 50c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <h>
 510:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <h+0x1>
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	09 f4       	brne	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 518:	be cf       	rjmp	.-132    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
				{
					break;
				}
			}

		e=0x08 & PORTD;
 51a:	8b b1       	in	r24, 0x0b	; 11
 51c:	88 70       	andi	r24, 0x08	; 8
 51e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <e>

	block = 0x02 & PORTD;
	if(block==OFF)
	{
		e=0x08 & PORTD;
		while(e==0)//)PD3
 522:	88 23       	and	r24, r24
 524:	09 f4       	brne	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 526:	5b cf       	rjmp	.-330    	; 0x3de <__vector_2+0x5e>
		e=0x08 & PORTD;

		}
	}

	a=ON;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <a>

}
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <main>:


int main(void)
{
	//way=0x00;
	battom0=OFF;
 542:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 546:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	i0=0;
 54a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i0+0x1>
 54e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i0>
	j0=0;
 552:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <j0+0x1>
 556:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <j0>
	battom1=OFF;
 55a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <battom1+0x1>
 55e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <battom1>
	i1=0;
 562:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <i1+0x1>
 566:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <i1>
	j1=0;
 56a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <j1+0x1>
 56e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <j1>

	b=2;
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <b>


	DDRB=(1<<DDB1)|(1<<DDB0)|(1<<DDB2)|(1<<DDB5);
 578:	87 e2       	ldi	r24, 0x27	; 39
 57a:	84 b9       	out	0x04, r24	; 4
	PORTB=(1<< PB2)|(1<<PB5);
 57c:	84 e2       	ldi	r24, 0x24	; 36
 57e:	85 b9       	out	0x05, r24	; 5


	PORTD=0x00;
 580:	1b b8       	out	0x0b, r1	; 11
	DDRD=(1<<DDD7)|(1<<DDD6);
 582:	80 ec       	ldi	r24, 0xC0	; 192
 584:	8a b9       	out	0x0a, r24	; 10
	//PORTD=(1<<PORTD3);
	

	cli();
 586:	f8 94       	cli
	Init_Interrupts();
 588:	0e 94 5b 00 	call	0xb6	; 0xb6 <Init_Interrupts>
	Init_Timers();
 58c:	0e 94 48 00 	call	0x90	; 0x90 <Init_Timers>
	//Init_ADC();
	//ADC_read();
	sei();
 590:	78 94       	sei
while(1)
{
	block = 0x02 & PORTD;
	if(block==OFF)
	{
		a=ON;
 592:	21 e0       	ldi	r18, 0x01	; 1
	//Nuber_of_operetions=(Nuber_of_operetions>>2);
	//b=Nuber_of_operetions;

while(1)
{
	block = 0x02 & PORTD;
 594:	8b b1       	in	r24, 0x0b	; 11
 596:	82 70       	andi	r24, 0x02	; 2
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <block+0x1>
 59e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <block>
	if(block==OFF)
 5a2:	89 2b       	or	r24, r25
 5a4:	19 f4       	brne	.+6      	; 0x5ac <main+0x6a>
	{
		a=ON;
 5a6:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <a>
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <main+0x6e>
		
	}
	else
	{
		a=OFF;
 5ac:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b0:	8f e3       	ldi	r24, 0x3F	; 63
 5b2:	9c e9       	ldi	r25, 0x9C	; 156
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <main+0x72>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x78>
 5ba:	00 00       	nop
 5bc:	eb cf       	rjmp	.-42     	; 0x594 <main+0x52>

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
