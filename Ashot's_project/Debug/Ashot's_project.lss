
Ashot's_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000442  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1e  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000745  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032a  00000000  00000000  00002265  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000258f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 31       	cpi	r26, 0x17	; 23
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  88:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Init_Timers>:

void 	Init_Timers()
{
	// enable timer interrupt for Timer0
		
	TCCR0A = (1<<WGM21); //ctc
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   //use clk/8
  94:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A); //interrupt
  96:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0=0x00;
  9a:	16 bc       	out	0x26, r1	; 38
	OCR0A=199;   // 10kHz
  9c:	97 ec       	ldi	r25, 0xC7	; 199
  9e:	97 bd       	out	0x27, r25	; 39
	//OCR1A=199;	// 10kHz


	// enable timer interrupt for Timer2

	TCCR2A = (1<<WGM21); //ctc
  a0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<CS21);   //use clk/8
  a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = (1<<OCIE2A); //interrupt
  a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCNT2=0x00;
  ac:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=199;   // 10kHz
  b0:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  b4:	08 95       	ret

000000b6 <Init_Interrupts>:

void Init_Interrupts()
{
	// enable External Interrupt Request 0 (pin 2)

	EICRA =0x03; //(1<<ISC00) | (1<<ISC01);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	//EIFR = (1<<INTF0);
//
	//// enable External Interrupt Request 1 (pin 3)

	//EICRA =0x00;//(1<<ISC10) | (1<<ISC11);
	EIMSK = 0x03;//(1<<INT1);
  bc:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0x03;//(1<<INTF1);
  be:	8c bb       	out	0x1c, r24	; 28
  c0:	08 95       	ret

000000c2 <__vector_1>:
uint8_t			led;
unsigned char	manual_mode;
uint8_t			motor_2_counter_checker = 0;

ISR (INT0_vect)
{	
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	if(AUTOMATIC_state==ON)
  d0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <AUTOMATIC_state>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	59 f4       	brne	.+22     	; 0xee <__vector_1+0x2c>
	{	
		motor_1_dir_on;
  d8:	2c 9a       	sbi	0x05, 4	; 5
		battom1=ON;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <battom1+0x1>
  e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <battom1>
		j1=0;
  e6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <j1+0x1>
  ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <j1>
		//c=40960;//2560;
	}
}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_7>:

ISR (TIMER2_COMPA_vect) 
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	
	if(battom1==ON)
 10c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <battom1>
 110:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <battom1+0x1>
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	09 f0       	breq	.+2      	; 0x11a <__vector_7+0x1e>
 118:	5b c0       	rjmp	.+182    	; 0x1d0 <__vector_7+0xd4>
	{
		AUTOMATIC_state=OFF;
 11a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <AUTOMATIC_state>
		motor_1_ON;
 11e:	2b 9a       	sbi	0x05, 3	; 5

		if (shpindel_path_counter!=0)
 120:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <shpindel_path_counter>
 124:	88 23       	and	r24, r24
 126:	09 f4       	brne	.+2      	; 0x12a <__vector_7+0x2e>
 128:	40 c0       	rjmp	.+128    	; 0x1aa <__vector_7+0xae>
		{
			if(j1==0)
 12a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <j1>
 12e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <j1+0x1>
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	a1 f4       	brne	.+40     	; 0x15e <__vector_7+0x62>
			{
				motor_1_Inverse;
 136:	95 b1       	in	r25, 0x05	; 5
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	89 27       	eor	r24, r25
 13c:	85 b9       	out	0x05, r24	; 5
				i1++;
 13e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i1>
 142:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <i1+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <i1+0x1>
 14c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i1>
				//c=c/2;
				//j1=c; 
				//}
				//else

				j1=motor_1_code_hz;//1khz generation 6sc 10-200ms wait 
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <j1+0x1>
 158:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <j1>
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_7+0x6c>

			}

			else
			{
				j1--;
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <j1+0x1>
 164:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <j1>
			}

			if(i1==motor_1_work_time)
 168:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i1>
 16c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <i1+0x1>
 170:	80 3e       	cpi	r24, 0xE0	; 224
 172:	9e 42       	sbci	r25, 0x2E	; 46
 174:	69 f5       	brne	.+90     	; 0x1d0 <__vector_7+0xd4>
			{
				i1=0;
 176:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <i1+0x1>
 17a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <i1>
				shpindel_path_counter--;
 17e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <shpindel_path_counter>
 182:	81 50       	subi	r24, 0x01	; 1
 184:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <shpindel_path_counter>
				
				//PORTB &= 0xFC; //&=(0<< PB1);
				motor_1_signal_OFF;
 188:	2d 98       	cbi	0x05, 5	; 5
				//PORTB &=(0<< PB0);
				motor_1_OFF;
 18a:	2b 98       	cbi	0x05, 3	; 5
				//PORTB ^=0x04;//(1<< PB2);
				motor_1_dir_inverse;
 18c:	95 b1       	in	r25, 0x05	; 5
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	89 27       	eor	r24, r25
 192:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	91 ee       	ldi	r25, 0xE1	; 225
 198:	24 e0       	ldi	r18, 0x04	; 4
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <__vector_7+0x9e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <__vector_7+0xa8>
 1a4:	00 00       	nop
				_delay_ms(100);



				//PORTB|=0x01;//(1<< PB0);
				motor_1_ON;
 1a6:	2b 9a       	sbi	0x05, 3	; 5
 1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <__vector_7+0xd4>
		}

		else
		{
			//PORTB|=0x04;//(1<< PB2);//////////////////////////////////////////
			motor_1_dir_on;
 1aa:	2c 9a       	sbi	0x05, 4	; 5
			//PORTB&=0xFE;//(0<< PB0);
			motor_1_OFF;
 1ac:	2b 98       	cbi	0x05, 3	; 5
			battom1=OFF;
 1ae:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <battom1+0x1>
 1b2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <battom1>
			battom0=ON;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <battom0+0x1>
 1be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <battom0>
			j0=0;
 1c2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <j0+0x1>
 1c6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <j0>
			//b=Nuber_of_operetions;
			shpindel_path_counter=shpindel_path_counter_VAR;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <shpindel_path_counter>
		}
	}

}	
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_14>:



ISR (TIMER0_COMPA_vect)
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	if(battom0==ON)
 1f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <battom0>
 1f6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <battom0+0x1>
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_14+0x20>
 1fe:	62 c0       	rjmp	.+196    	; 0x2c4 <__vector_14+0xe4>
	{
		//PORTD|=(1<< PD7);
		motor_2_ON;
 200:	29 9a       	sbi	0x05, 1	; 5
		if(j0==0)
 202:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <j0>
 206:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <j0+0x1>
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	a1 f4       	brne	.+40     	; 0x236 <__vector_14+0x56>
		{
			//PORTD^=(1<< PD6 );
			motor_2_Inverse;
 20e:	95 b1       	in	r25, 0x05	; 5
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	89 27       	eor	r24, r25
 214:	85 b9       	out	0x05, r24	; 5
			j0=motor_2_code_hz;
 216:	81 e3       	ldi	r24, 0x31	; 49
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <j0+0x1>
 21e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <j0>

			i0++;
 222:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i0>
 226:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i0+0x1>
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i0+0x1>
 230:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i0>
 234:	05 c0       	rjmp	.+10     	; 0x240 <__vector_14+0x60>
			}

		else
		{
			j0--;
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <j0+0x1>
 23c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <j0>
		}
		if(i0==200)
 240:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i0>
 244:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i0+0x1>
 248:	88 3c       	cpi	r24, 0xC8	; 200
 24a:	91 05       	cpc	r25, r1
 24c:	e1 f4       	brne	.+56     	; 0x286 <__vector_14+0xa6>
		{
			i0=0;
 24e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <i0+0x1>
 252:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i0>
			battom0=OFF;
 256:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <battom0+0x1>
 25a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <battom0>
			
			//PORTD&=(0<< PD7);
			motor_2_OFF; 
 25e:	29 98       	cbi	0x05, 1	; 5
			//PORTD^=(0<< PD6);
			//motor_2_Inverse;
			motor_2_signal_OFF;
 260:	28 98       	cbi	0x05, 0	; 5
			AUTOMATIC_state=ON;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <AUTOMATIC_state>
			battom1=ON;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <battom1+0x1>
 270:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <battom1>
			j1=0;
 274:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <j1+0x1>
 278:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <j1>
			motor_2_counter_checker++;
 27c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}

			if (motor_2_counter_checker == 2)
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	d9 f4       	brne	.+54     	; 0x2c4 <__vector_14+0xe4>
			{
				led = led_check; //6 pd6 // pinb3 pin 11
 28e:	89 b1       	in	r24, 0x09	; 9
 290:	80 74       	andi	r24, 0x40	; 64
 292:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led>

				while(led==OFF)
 296:	81 11       	cpse	r24, r1
 298:	11 c0       	rjmp	.+34     	; 0x2bc <__vector_14+0xdc>
				{
					//PORTB|=0x02;  //  9 pb1 (1<< PB1 ) // PORTD|=0x80;//(1<< PD7);
					//PORTB^=0x01;  // 8 pb0 (1<< PB0 ) // PORTD^=0x40;//(1<< PD6
					motor_2_ON;
					motor_2_Inverse;
 29a:	91 e0       	ldi	r25, 0x01	; 1

				while(led==OFF)
				{
					//PORTB|=0x02;  //  9 pb1 (1<< PB1 ) // PORTD|=0x80;//(1<< PD7);
					//PORTB^=0x01;  // 8 pb0 (1<< PB0 ) // PORTD^=0x40;//(1<< PD6
					motor_2_ON;
 29c:	29 9a       	sbi	0x05, 1	; 5
					motor_2_Inverse;
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	89 27       	eor	r24, r25
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	ef e1       	ldi	r30, 0x1F	; 31
 2a6:	fe e4       	ldi	r31, 0x4E	; 78
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <__vector_14+0xc8>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <__vector_14+0xce>
 2ae:	00 00       	nop
					_delay_ms(motor_2_hz/20);
					led = led_check; // 6 pd6 // pinb3 pin
 2b0:	89 b1       	in	r24, 0x09	; 9
 2b2:	80 74       	andi	r24, 0x40	; 64
 2b4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led>

			if (motor_2_counter_checker == 2)
			{
				led = led_check; //6 pd6 // pinb3 pin 11

				while(led==OFF)
 2b8:	88 23       	and	r24, r24
 2ba:	81 f3       	breq	.-32     	; 0x29c <__vector_14+0xbc>
					motor_2_Inverse;
					_delay_ms(motor_2_hz/20);
					led = led_check; // 6 pd6 // pinb3 pin
				}
				//PORTB&=0x6B; // 8 pb0 - 11 pb3 // 9 pb1 - 13 pb5 // 1111 1100 <<----petqa poxel
				motor_2_OFF;
 2bc:	29 98       	cbi	0x05, 1	; 5
				motor_2_signal_OFF;
 2be:	28 98       	cbi	0x05, 0	; 5
				motor_2_counter_checker = 0;
 2c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
	}
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_2>:


/***************************************
===========>> manual mode <<===========*/
ISR(INT1_vect)
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	//u= 0x00;
	AUTOMATIC_state=OFF;
 2ee:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <AUTOMATIC_state>
	battom1=OFF;
 2f2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <battom1+0x1>
 2f6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <battom1>
	battom0=OFF;
 2fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <battom0+0x1>
 2fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <battom0>
	//PORTD&=0x7F;
	motor_2_signal_OFF;
 302:	28 98       	cbi	0x05, 0	; 5
	motor_2_OFF;
 304:	29 98       	cbi	0x05, 1	; 5
	//PORTB&=0xFE;
	motor_1_OFF;
 306:	2b 98       	cbi	0x05, 3	; 5
	motor_1_dir_on;
 308:	2c 9a       	sbi	0x05, 4	; 5
	//motor_1_dir_inverse;

	//manual_mode=0x08 & PORTD;
	manual_mode=manual_mode_check;
 30a:	89 b1       	in	r24, 0x09	; 9
 30c:	88 70       	andi	r24, 0x08	; 8
 30e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <manual_mode>
		while(manual_mode_motor_1_on_check!=OFF)//PIND4==0x10 check if the flag is on
		{ 
			//PORTB|=0x01;
			motor_1_ON;
			//PORTB^=0x02;//(1<< PB1 );
			motor_1_Inverse;
 312:	40 e2       	ldi	r20, 0x20	; 32
			for(uint8_t u=1;u<=200;u++)
			{
				//PORTD|=0x80;//(1<< PD7);
				//PORTD^=0x40;//(1<< PD6 );
				motor_2_ON;
				motor_2_Inverse;
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	38 ec       	ldi	r19, 0xC8	; 200
	motor_1_dir_on;
	//motor_1_dir_inverse;

	//manual_mode=0x08 & PORTD;
	manual_mode=manual_mode_check;
	while(manual_mode_check==OFF)//)PD3//inverse logic should be ==ON
 318:	44 c0       	rjmp	.+136    	; 0x3a2 <__vector_2+0xcc>
	{
		
		while(manual_mode_motor_1_on_check!=OFF)//PIND4==0x10 check if the flag is on
		{ 
			//PORTB|=0x01;
			motor_1_ON;
 31a:	2b 9a       	sbi	0x05, 3	; 5
			//PORTB^=0x02;//(1<< PB1 );
			motor_1_Inverse;
 31c:	85 b1       	in	r24, 0x05	; 5
 31e:	84 27       	eor	r24, r20
 320:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	8f ec       	ldi	r24, 0xCF	; 207
 324:	97 e0       	ldi	r25, 0x07	; 7
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <__vector_2+0x50>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <__vector_2+0x56>
 32c:	00 00       	nop
	//manual_mode=0x08 & PORTD;
	manual_mode=manual_mode_check;
	while(manual_mode_check==OFF)//)PD3//inverse logic should be ==ON
	{
		
		while(manual_mode_motor_1_on_check!=OFF)//PIND4==0x10 check if the flag is on
 32e:	4c 99       	sbic	0x09, 4	; 9
 330:	f4 cf       	rjmp	.-24     	; 0x31a <__vector_2+0x44>
			_delay_us(motor_1_hz/2);
			//w= 0x10 & PIND;				
		}
			
		//PORTB&=0xFE;//(0<< PB0);
		motor_1_OFF;
 332:	2b 98       	cbi	0x05, 3	; 5
		motor_1_signal_OFF;
 334:	2d 98       	cbi	0x05, 5	; 5

		
		while(manual_mode_motor_2_on_check!=OFF)
 336:	0d c0       	rjmp	.+26     	; 0x352 <__vector_2+0x7c>
 338:	93 2f       	mov	r25, r19
		{
			for(uint8_t u=1;u<=200;u++)
			{
				//PORTD|=0x80;//(1<< PD7);
				//PORTD^=0x40;//(1<< PD6 );
				motor_2_ON;
 33a:	29 9a       	sbi	0x05, 1	; 5
				motor_2_Inverse;
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	82 27       	eor	r24, r18
 340:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	ef e1       	ldi	r30, 0x1F	; 31
 344:	fe e4       	ldi	r31, 0x4E	; 78
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <__vector_2+0x70>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <__vector_2+0x76>
 34c:	00 00       	nop
 34e:	91 50       	subi	r25, 0x01	; 1
		motor_1_signal_OFF;

		
		while(manual_mode_motor_2_on_check!=OFF)
		{
			for(uint8_t u=1;u<=200;u++)
 350:	a1 f7       	brne	.-24     	; 0x33a <__vector_2+0x64>
		//PORTB&=0xFE;//(0<< PB0);
		motor_1_OFF;
		motor_1_signal_OFF;

		
		while(manual_mode_motor_2_on_check!=OFF)
 352:	1a 99       	sbic	0x03, 2	; 3
 354:	f1 cf       	rjmp	.-30     	; 0x338 <__vector_2+0x62>
			}

			
		}
		//PORTD&=0x7F;
		motor_2_OFF;
 356:	29 98       	cbi	0x05, 1	; 5
		motor_2_signal_OFF;
 358:	28 98       	cbi	0x05, 0	; 5

		auto_correct = auto_correct_check;// 7 pd7 // pinb4 pin 12
 35a:	89 b1       	in	r24, 0x09	; 9
 35c:	80 78       	andi	r24, 0x80	; 128
 35e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <auto_correct>
		while(auto_correct!=OFF)
 362:	88 23       	and	r24, r24
 364:	f1 f0       	breq	.+60     	; 0x3a2 <__vector_2+0xcc>
		{
			led = led_check; //6 pd6 // pinb3 pin 11
 366:	89 b1       	in	r24, 0x09	; 9
 368:	80 74       	andi	r24, 0x40	; 64
 36a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led>

			while(led==OFF)
 36e:	81 11       	cpse	r24, r1
 370:	10 c0       	rjmp	.+32     	; 0x392 <__vector_2+0xbc>
			{
				//PORTB|=0x02;  //  9 pb1 (1<< PB1 ) // PORTD|=0x80;//(1<< PD7);
				//PORTB^=0x01;  // 8 pb0 (1<< PB0 ) // PORTD^=0x40;//(1<< PD6 
				motor_2_ON;
 372:	29 9a       	sbi	0x05, 1	; 5
				motor_2_Inverse;
 374:	85 b1       	in	r24, 0x05	; 5
 376:	82 27       	eor	r24, r18
 378:	85 b9       	out	0x05, r24	; 5
 37a:	8f e1       	ldi	r24, 0x1F	; 31
 37c:	9e e4       	ldi	r25, 0x4E	; 78
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <__vector_2+0xa8>
 382:	00 c0       	rjmp	.+0      	; 0x384 <__vector_2+0xae>
 384:	00 00       	nop
				_delay_ms(motor_2_hz/20);
				led = led_check; // 6 pd6 // pinb3 pin 
 386:	89 b1       	in	r24, 0x09	; 9
 388:	80 74       	andi	r24, 0x40	; 64
 38a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <led>
		auto_correct = auto_correct_check;// 7 pd7 // pinb4 pin 12
		while(auto_correct!=OFF)
		{
			led = led_check; //6 pd6 // pinb3 pin 11

			while(led==OFF)
 38e:	88 23       	and	r24, r24
 390:	81 f3       	breq	.-32     	; 0x372 <__vector_2+0x9c>
				motor_2_Inverse;
				_delay_ms(motor_2_hz/20);
				led = led_check; // 6 pd6 // pinb3 pin 
			}
			//PORTB&=0x6B; // 8 pb0 - 11 pb3 // 9 pb1 - 13 pb5 // 1111 1100 <<----petqa poxel
			motor_2_OFF;
 392:	29 98       	cbi	0x05, 1	; 5
			motor_2_signal_OFF;
 394:	28 98       	cbi	0x05, 0	; 5
			auto_correct = auto_correct_check; //12 pb4 --> 7 pd7 // pinb4 pin 12
 396:	89 b1       	in	r24, 0x09	; 9
 398:	80 78       	andi	r24, 0x80	; 128
 39a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <auto_correct>
		//PORTD&=0x7F;
		motor_2_OFF;
		motor_2_signal_OFF;

		auto_correct = auto_correct_check;// 7 pd7 // pinb4 pin 12
		while(auto_correct!=OFF)
 39e:	81 11       	cpse	r24, r1
 3a0:	e2 cf       	rjmp	.-60     	; 0x366 <__vector_2+0x90>
	motor_1_dir_on;
	//motor_1_dir_inverse;

	//manual_mode=0x08 & PORTD;
	manual_mode=manual_mode_check;
	while(manual_mode_check==OFF)//)PD3//inverse logic should be ==ON
 3a2:	4b 99       	sbic	0x09, 3	; 9
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <__vector_2+0xd6>
	{
		
		while(manual_mode_motor_1_on_check!=OFF)//PIND4==0x10 check if the flag is on
 3a6:	4c 99       	sbic	0x09, 4	; 9
 3a8:	b8 cf       	rjmp	.-144    	; 0x31a <__vector_2+0x44>
 3aa:	c3 cf       	rjmp	.-122    	; 0x332 <__vector_2+0x5c>
			motor_2_OFF;
			motor_2_signal_OFF;
			auto_correct = auto_correct_check; //12 pb4 --> 7 pd7 // pinb4 pin 12
		}
	}
	motor_1_dir_on;
 3ac:	2c 9a       	sbi	0x05, 4	; 5
	AUTOMATIC_state=ON;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <AUTOMATIC_state>
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <main>:


int main(void)
{
	//way=0x00;
	battom0=OFF;
 3cc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <battom0+0x1>
 3d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <battom0>
	i0=0;
 3d4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <i0+0x1>
 3d8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i0>
	j0=0;
 3dc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <j0+0x1>
 3e0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <j0>
	battom1=OFF;
 3e4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <battom1+0x1>
 3e8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <battom1>
	i1=0;
 3ec:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <i1+0x1>
 3f0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <i1>
	j1=0;
 3f4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <j1+0x1>
 3f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <j1>

	shpindel_path_counter=shpindel_path_counter_VAR;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <shpindel_path_counter>

	AUTOMATIC_state=ON;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <AUTOMATIC_state>
	PORTB=0x00;
 408:	15 b8       	out	0x05, r1	; 5
	PORTD=0x00;
 40a:	1b b8       	out	0x0b, r1	; 11
	DDRB=0x00;
 40c:	14 b8       	out	0x04, r1	; 4
	DDRD=0x00;
 40e:	1a b8       	out	0x0a, r1	; 10

	sbi(motor_1_freq_DDR,motor_1_freq_DDR_pin);
 410:	23 9a       	sbi	0x04, 3	; 4
	sbi(motor_1_ON_OFF_DDR,motor_1_ON_OFF_DDR_pin);
 412:	25 9a       	sbi	0x04, 5	; 4
	sbi(motor_1_dir_DDR,motor_1_dir_DDR_pin);
 414:	24 9a       	sbi	0x04, 4	; 4
	//DDRB=(1<<DDB1)|(1<<DDB0)|(1<<DDB2)|(1<<DDB5);
	//PORTB=(1<< PB2)|(1<<PB5);
	motor_1_dir_on;
 416:	2c 9a       	sbi	0x05, 4	; 5
	motor_2_freq_PORT=0x00;//bla bla bla pull up stuff
 418:	15 b8       	out	0x05, r1	; 5
	sbi(motor_2_freq_DDR,motor_2_freq_DDR_pin);
 41a:	20 9a       	sbi	0x04, 0	; 4
	sbi(motor_2_ON_OFF_DDR,motor_2_ON_OFF_DDR_pin);
 41c:	21 9a       	sbi	0x04, 1	; 4
	//PORTD=(1<<PORTD3);
	

	cli();
 41e:	f8 94       	cli
	Init_Interrupts();
 420:	0e 94 5b 00 	call	0xb6	; 0xb6 <Init_Interrupts>
	Init_Timers();
 424:	0e 94 48 00 	call	0x90	; 0x90 <Init_Timers>
	//Init_ADC();
	//ADC_read();
	sei();
 428:	78 94       	sei
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	83 ed       	ldi	r24, 0xD3	; 211
 42e:	90 e3       	ldi	r25, 0x30	; 48
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
 43c:	f6 cf       	rjmp	.-20     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
